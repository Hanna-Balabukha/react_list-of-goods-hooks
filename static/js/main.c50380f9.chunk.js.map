{"version":3,"sources":["App.tsx","index.tsx"],"names":["Goods","App","useState","sortField","setSortField","isReversed","setIsReversed","toSortGoods","goods","preparedGoods","Object","values","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","onClick","type","cn","state","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAMYA,E,6EAAAA,K,sBAAAA,E,gBAAAA,E,YAAAA,E,qBAAAA,E,cAAAA,E,cAAAA,E,YAAAA,E,cAAAA,E,UAAAA,E,iBAAAA,M,KA0CL,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAhCR,SAA0BC,EAA1B,GAIM,IAHFL,EAGC,EAHDA,UAAWE,EAGV,EAHUA,WAIPI,EAAgBC,OAAOC,OAAOH,GAqBpC,OAnBIL,GACFM,EAAcG,MAAK,SAACC,EAAeC,GACjC,OAAQX,GACN,IAAK,mBACH,OAAOU,EAAME,cAAcD,GAE7B,IAAK,iBACH,OAAOD,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAMaS,CAAiBlB,EAAO,CAC1CG,YACAE,eAQF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAa,qBAC5BiB,KAAK,SACLF,UAAWG,IAAG,iBACZ,CAAE,WAA0B,qBAAdnB,IAJlB,iCASA,wBACEiB,QAAS,kBAAMhB,EAAa,mBAC5BiB,KAAK,SACLF,UAAWG,IAAG,oBACZ,CAAE,WAA0B,mBAAdnB,IAJlB,4BASA,wBACEiB,QAAS,kBAAMd,GAAc,SAAAiB,GAAK,OAAKA,MACvCF,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CAAE,YAAajB,IAHpD,sBAQiB,IAAfA,GAAqC,KAAdF,EAErB,wBACEiB,QAAS,kBApCnBhB,EAAa,SACbE,GAAc,IAoCJe,KAAK,SACLF,UAAWG,IAAG,6BAHhB,mBAQA,MAGN,6BACE,6BACGf,EAAYiB,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCvGpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c50380f9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport enum Goods {\n  Dumplings = 'Dumplings',\n  Carrot = 'Carrot',\n  Eggs = 'Eggs',\n  IceCream = 'Ice cream',\n  Apple = 'Apple',\n  Bread = 'Bread',\n  Fish = 'Fish',\n  Honey = 'Honey',\n  Jam = 'Jam',\n  Garlic = 'Garlic',\n}\n\nfunction getPreparedGoods(goods: typeof Goods,\n  { sortField, isReversed }: {\n    sortField: string;\n    isReversed: boolean;\n  }) {\n  const preparedGoods = Object.values(goods);\n\n  if (sortField) {\n    preparedGoods.sort((good1: string, good2: string) => {\n      switch (sortField) {\n        case 'SORT_BY_ALPHABET':\n          return good1.localeCompare(good2);\n\n        case 'SORT_BY_LENGTH':\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const toSortGoods = getPreparedGoods(Goods, {\n    sortField,\n    isReversed,\n  });\n\n  const handleReset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField('SORT_BY_ALPHABET')}\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== 'SORT_BY_ALPHABET' })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField('SORT_BY_LENGTH')}\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortField !== 'SORT_BY_LENGTH' })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed(state => !state)}\n          type=\"button\"\n          className={cn('button is-warning', { 'is-light': !isReversed })}\n        >\n          Reverse\n        </button>\n\n        { isReversed === true || sortField !== ''\n          ? (\n            <button\n              onClick={() => handleReset()}\n              type=\"button\"\n              className={cn('button is-danger is-light')}\n            >\n              Reset\n            </button>\n          )\n          : ''}\n      </div>\n\n      <ul>\n        <ul>\n          {toSortGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}